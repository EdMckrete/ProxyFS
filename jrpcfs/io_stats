#! /usr/bin/awk -f
#
# Command to parse periodic stats logs from proxyfsd.log
# and count the average duration.
#

BEGIN {
   PROCINFO["sorted_in"] = "@ind_num_asc"
   defaultEventString = 36
   maxEventString = 36
}
{
    # Skip lines that we don't care about
    if ( $0 ~ /Periodic stats:/ )
    {
	   # op is the 8th field. Strip the comma from the end.
	   split($8, tempOp, ",")
	   key = tempOp[1]

       #print "*** op is " key

	   #print "Number of stats found: " $9 " " $10 " " $11 " " $12
	   split($12, tempArray, ":")
	   numberOfOps = tempArray[1]
	   #print "Number of stats found: " numberOfOps
       numOps[key] += numberOfOps

       # Count fields, total duration is the ninth-last one
       #print "op is " key ", num ops is " numberOfOps ", duration is " $(NF-8)
       totalOpDurationsMs[key] += $(NF-8)

        # Parse out individual events, if present
        eventNumber = 1
	    split($0, events, ";")
		for (ev in events)
        {
			#print "raw event " ev " is " events[ev]

			# Look for "+" that each event has, but skip the "total duration" one, since it isn't an event
            if ((events[ev] ~ /\+/) && (events[ev] !~ /total duration/))
            {
			    #print "event " eventNumber " is " events[ev]

				# Event name is everything on left of "+", duration stuff on the right
	            split(events[ev], eventDetail, "+")

				eventName = eventDetail[1]

				# Keep track of event name size, for print formatting later
				if ( length(eventName) > maxEventString ) {
					# +3 is for event number plus space
				    maxEventString = length(eventName) + 3
				}

				# Event duration is the first field on rhs
	            split(eventDetail[2], timingDetail, " ")
                #print "  event duration: " timingDetail[1]

                #print "storing OpEventMs["key"]["eventNumber " " eventName"] += " timingDetail[1]
                OpEventMs[key][eventNumber " " eventName] += timingDetail[1]

				# Number of events is also on the rhs
				if (timingDetail[6] ~ /\[numEvents/)
				{
					# get the ] off the end of the number of events
					split(timingDetail[7], numEventsDetail, "]")
				    #print "number of events is ", numEventsDetail[1]
                    OpEventCount[key][eventNumber " " eventName] += numEventsDetail[1]
				}

	            eventNumber = eventNumber + 1
            }
        }
    }
}
END {
	allOpsDurationMs = 0
	allOpsCount = 0
    addlEventString = 0

	if (maxEventString > defaultEventString)
	{
        addlEventString = maxEventString - defaultEventString
	}

    printf "\n"
    printf "                                           %" 24 + addlEventString "s\n",
		   "  Total          Average"
    printf "Operation     Quantity                     %" 30 + addlEventString "s\n",
		   "Duration (ms)    duration (ms)"
    printf "---------     --------                     %" 30 + addlEventString "s\n",
		   "-------------    -------------"
    for (op in numOps)
    {
        if ( numOps[op] > 0 )
        {
            if (totalOpDurationsMs[op] > 0)
			{
				printf "%-12s   %5d                       %" 9 + addlEventString ".0f      %9.2f %8.2f %%\n",
					op, numOps[op], totalOpDurationsMs[op], totalOpDurationsMs[op]/numOps[op],
					totalOpDurationsMs[op]/totalOpDurationsMs[op] * 100

				allOpsDurationMs += totalOpDurationsMs[op]
				allOpsCount      += numOps[op]

				if ( length(OpEventMs[op]) != 0 )
				{
			   		countedDurationMs = 0
				  	for (event in OpEventMs[op])
					{
					   	#print "OpEventMs event is " event " = " OpEventMs[key][event]
					  	printf "  (%-" maxEventString "s)   %9.0f      %9.2f %8.2f %%   (hits %5d/%5d)\n",
					  		event, OpEventMs[op][event], OpEventMs[op][event]/numOps[op],
					  		OpEventMs[op][event]/totalOpDurationsMs[op] * 100,
                            OpEventCount[op][event], numOps[op]
						countedDurationMs += OpEventMs[op][event]
				  	}

					# Unaccounted doesn't make sense with these stats since we always have
					# all the data. Comment this out.
			  		#remainingDurationMs = totalOpDurationsMs[op] - countedDurationMs
		   			#printf "  (%-36s)   %9.0f      %9.2f %8.2f %%\n",
				 	#       "    unaccounted", remainingDurationMs, remainingDurationMs/numOps[op],
					#       remainingDurationMs/totalOpDurationsMs[op] * 100
			   	}
			} else {
				printf "%-12s   %5d                       %" 9 + addlEventString ".0f      %9.2f %8.2f %%\n",
					op, numOps[op], totalOpDurationsMs[op], totalOpDurationsMs[op]/numOps[op], 100
		    }

            print " "
        }
    }

    printf "%-12s   %5d                       %" 9 + addlEventString ".0f\n",
		   "All ops", allOpsCount, allOpsDurationMs
    printf "\n"
}
